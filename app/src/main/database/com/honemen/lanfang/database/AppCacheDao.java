package com.honemen.lanfang.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.honemen.lanfang.database.AppCache;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APP_CACHE.
*/
public class AppCacheDao extends AbstractDao<AppCache, Long> {

    public static final String TABLENAME = "APP_CACHE";

    /**
     * Properties of entity AppCache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageId = new Property(1, String.class, "PackageId", false, "PACKAGE_ID");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property VersionCode = new Property(3, Integer.class, "VersionCode", false, "VERSION_CODE");
        public final static Property VersionName = new Property(4, String.class, "VersionName", false, "VERSION_NAME");
        public final static Property Size = new Property(5, Long.class, "Size", false, "SIZE");
        public final static Property System = new Property(6, Boolean.class, "System", false, "SYSTEM");
        public final static Property Path = new Property(7, String.class, "Path", false, "PATH");
        public final static Property Date = new Property(8, Long.class, "Date", false, "DATE");
        public final static Property Exportable = new Property(9, Boolean.class, "exportable", false, "EXPORTABLE");
    };


    public AppCacheDao(DaoConfig config) {
        super(config);
    }
    
    public AppCacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_CACHE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PACKAGE_ID' TEXT NOT NULL ," + // 1: PackageId
                "'NAME' TEXT," + // 2: Name
                "'VERSION_CODE' INTEGER," + // 3: VersionCode
                "'VERSION_NAME' TEXT," + // 4: VersionName
                "'SIZE' INTEGER," + // 5: Size
                "'SYSTEM' INTEGER," + // 6: System
                "'PATH' TEXT," + // 7: Path
                "'DATE' INTEGER," + // 8: Date
                "'EXPORTABLE' INTEGER);"); // 9: exportable
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_CACHE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppCache entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPackageId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        Integer VersionCode = entity.getVersionCode();
        if (VersionCode != null) {
            stmt.bindLong(4, VersionCode);
        }
 
        String VersionName = entity.getVersionName();
        if (VersionName != null) {
            stmt.bindString(5, VersionName);
        }
 
        Long Size = entity.getSize();
        if (Size != null) {
            stmt.bindLong(6, Size);
        }
 
        Boolean System = entity.getSystem();
        if (System != null) {
            stmt.bindLong(7, System ? 1l: 0l);
        }
 
        String Path = entity.getPath();
        if (Path != null) {
            stmt.bindString(8, Path);
        }
 
        Long Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(9, Date);
        }
 
        Boolean exportable = entity.getExportable();
        if (exportable != null) {
            stmt.bindLong(10, exportable ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppCache readEntity(Cursor cursor, int offset) {
        AppCache entity = new AppCache( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // PackageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // VersionCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // VersionName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // Size
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // System
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Path
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // Date
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // exportable
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppCache entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageId(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersionCode(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setVersionName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSystem(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setExportable(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppCache entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppCache entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

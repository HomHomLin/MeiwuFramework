package com.honemen.lanfang.database;

import java.util.List;
import com.honemen.lanfang.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HTTP_RETRY_REQUEST.
 */
public class HttpRetryRequest {

    private Long id;
    /** Not-null value. */
    private String url;
    private Boolean deleted;
    private Integer responseCode;
    private String reponseResult;
    private Long createTime;
    private Long lastRetryTime;
    private Integer retryCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HttpRetryRequestDao myDao;

    private List<HttpRetryGetParam> getParams;
    private List<HttpRetryPostParam> postParams;

    public HttpRetryRequest() {
    }

    public HttpRetryRequest(Long id) {
        this.id = id;
    }

    public HttpRetryRequest(Long id, String url, Boolean deleted, Integer responseCode, String reponseResult, Long createTime, Long lastRetryTime, Integer retryCount) {
        this.id = id;
        this.url = url;
        this.deleted = deleted;
        this.responseCode = responseCode;
        this.reponseResult = reponseResult;
        this.createTime = createTime;
        this.lastRetryTime = lastRetryTime;
        this.retryCount = retryCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHttpRetryRequestDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUrl() {
        return url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUrl(String url) {
        this.url = url;
    }

    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public Integer getResponseCode() {
        return responseCode;
    }

    public void setResponseCode(Integer responseCode) {
        this.responseCode = responseCode;
    }

    public String getReponseResult() {
        return reponseResult;
    }

    public void setReponseResult(String reponseResult) {
        this.reponseResult = reponseResult;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Long getLastRetryTime() {
        return lastRetryTime;
    }

    public void setLastRetryTime(Long lastRetryTime) {
        this.lastRetryTime = lastRetryTime;
    }

    public Integer getRetryCount() {
        return retryCount;
    }

    public void setRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<HttpRetryGetParam> getGetParams() {
        if (getParams == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HttpRetryGetParamDao targetDao = daoSession.getHttpRetryGetParamDao();
            List<HttpRetryGetParam> getParamsNew = targetDao._queryHttpRetryRequest_GetParams(id);
            synchronized (this) {
                if(getParams == null) {
                    getParams = getParamsNew;
                }
            }
        }
        return getParams;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGetParams() {
        getParams = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<HttpRetryPostParam> getPostParams() {
        if (postParams == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HttpRetryPostParamDao targetDao = daoSession.getHttpRetryPostParamDao();
            List<HttpRetryPostParam> postParamsNew = targetDao._queryHttpRetryRequest_PostParams(id);
            synchronized (this) {
                if(postParams == null) {
                    postParams = postParamsNew;
                }
            }
        }
        return postParams;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPostParams() {
        postParams = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package com.honemen.lanfang.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.honemen.lanfang.database.HttpRetryRequest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HTTP_RETRY_REQUEST.
*/
public class HttpRetryRequestDao extends AbstractDao<HttpRetryRequest, Long> {

    public static final String TABLENAME = "HTTP_RETRY_REQUEST";

    /**
     * Properties of entity HttpRetryRequest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Deleted = new Property(2, Boolean.class, "deleted", false, "DELETED");
        public final static Property ResponseCode = new Property(3, Integer.class, "responseCode", false, "RESPONSE_CODE");
        public final static Property ReponseResult = new Property(4, String.class, "reponseResult", false, "REPONSE_RESULT");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property LastRetryTime = new Property(6, Long.class, "lastRetryTime", false, "LAST_RETRY_TIME");
        public final static Property RetryCount = new Property(7, Integer.class, "retryCount", false, "RETRY_COUNT");
    };

    private DaoSession daoSession;


    public HttpRetryRequestDao(DaoConfig config) {
        super(config);
    }
    
    public HttpRetryRequestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HTTP_RETRY_REQUEST' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'URL' TEXT NOT NULL ," + // 1: url
                "'DELETED' INTEGER," + // 2: deleted
                "'RESPONSE_CODE' INTEGER," + // 3: responseCode
                "'REPONSE_RESULT' TEXT," + // 4: reponseResult
                "'CREATE_TIME' INTEGER," + // 5: createTime
                "'LAST_RETRY_TIME' INTEGER," + // 6: lastRetryTime
                "'RETRY_COUNT' INTEGER);"); // 7: retryCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HTTP_RETRY_REQUEST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HttpRetryRequest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(3, deleted ? 1l: 0l);
        }
 
        Integer responseCode = entity.getResponseCode();
        if (responseCode != null) {
            stmt.bindLong(4, responseCode);
        }
 
        String reponseResult = entity.getReponseResult();
        if (reponseResult != null) {
            stmt.bindString(5, reponseResult);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long lastRetryTime = entity.getLastRetryTime();
        if (lastRetryTime != null) {
            stmt.bindLong(7, lastRetryTime);
        }
 
        Integer retryCount = entity.getRetryCount();
        if (retryCount != null) {
            stmt.bindLong(8, retryCount);
        }
    }

    @Override
    protected void attachEntity(HttpRetryRequest entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HttpRetryRequest readEntity(Cursor cursor, int offset) {
        HttpRetryRequest entity = new HttpRetryRequest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // deleted
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // responseCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reponseResult
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // lastRetryTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // retryCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HttpRetryRequest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setDeleted(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setResponseCode(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setReponseResult(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLastRetryTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRetryCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HttpRetryRequest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HttpRetryRequest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

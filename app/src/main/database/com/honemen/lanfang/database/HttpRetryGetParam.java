package com.honemen.lanfang.database;

import com.honemen.lanfang.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HTTP_RETRY_GET_PARAM.
 */
public class HttpRetryGetParam {

    private Long id;
    /** Not-null value. */
    private String key;
    /** Not-null value. */
    private String value;
    private long requestId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HttpRetryGetParamDao myDao;

    private HttpRetryRequest httpRetryRequest;
    private Long httpRetryRequest__resolvedKey;


    public HttpRetryGetParam() {
    }

    public HttpRetryGetParam(Long id) {
        this.id = id;
    }

    public HttpRetryGetParam(Long id, String key, String value, long requestId) {
        this.id = id;
        this.key = key;
        this.value = value;
        this.requestId = requestId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHttpRetryGetParamDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getKey() {
        return key;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setKey(String key) {
        this.key = key;
    }

    /** Not-null value. */
    public String getValue() {
        return value;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setValue(String value) {
        this.value = value;
    }

    public long getRequestId() {
        return requestId;
    }

    public void setRequestId(long requestId) {
        this.requestId = requestId;
    }

    /** To-one relationship, resolved on first access. */
    public HttpRetryRequest getHttpRetryRequest() {
        long __key = this.requestId;
        if (httpRetryRequest__resolvedKey == null || !httpRetryRequest__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HttpRetryRequestDao targetDao = daoSession.getHttpRetryRequestDao();
            HttpRetryRequest httpRetryRequestNew = targetDao.load(__key);
            synchronized (this) {
                httpRetryRequest = httpRetryRequestNew;
            	httpRetryRequest__resolvedKey = __key;
            }
        }
        return httpRetryRequest;
    }

    public void setHttpRetryRequest(HttpRetryRequest httpRetryRequest) {
        if (httpRetryRequest == null) {
            throw new DaoException("To-one property 'requestId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.httpRetryRequest = httpRetryRequest;
            requestId = httpRetryRequest.getId();
            httpRetryRequest__resolvedKey = requestId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
